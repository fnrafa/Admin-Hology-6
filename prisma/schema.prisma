generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admins {
  admin_id       Int             @id @default(autoincrement()) @db.UnsignedSmallInt
  admin_uuid     String          @unique @default(uuid()) @db.Char(36)
  admin_email    String          @unique @db.VarChar(60)
  admin_name     String          @db.VarChar(45)
  admin_password String          @db.Text
  admin_role     role_for_admins
  created_at     DateTime        @default(now()) @db.DateTime(0)
  updated_at     DateTime        @default(now()) @db.DateTime(0)
}

model users {
  user_id               Int            @id @default(autoincrement()) @db.UnsignedSmallInt
  user_uuid             String         @unique @default(uuid()) @db.Char(36)
  user_fullname         String         @db.VarChar(60)
  user_email            String         @unique(map: "user_email") @db.VarChar(60)
  user_birthdate        DateTime       @db.Date
  user_gender           String         @db.Char(1)
  user_password         String         @db.Text
  provinsi_id           Int            @db.UnsignedSmallInt
  forgot_password_token String         @default("no_token") @db.VarChar(20)
  created_at            DateTime       @default(now()) @db.DateTime(0)
  updated_at            DateTime       @default(now()) @db.DateTime(0)
  institution           String         @db.VarChar(60)
  email_verified_token  String         @default("no_token") @db.VarChar(20)
  no_handphone          String         @db.VarChar(60)
  member_of_teams       detail_teams[]
  leader_of_team        teams?         @relation("teams_team_leadTousers")
  seminar               user_seminars?
  provinsi              provinsi       @relation(fields: [provinsi_id], references: [provinsi_id], onUpdate: Restrict, map: "users_provinsi_foreign")

  @@index([provinsi_id], map: "users_provinsi_id_foreign")
}

model provinsi {
  provinsi_id   Int     @id @unique @default(autoincrement()) @db.UnsignedSmallInt
  provinsi_name String  @unique @db.VarChar(255)
  users         users[]
}

model user_seminars {
  user_id     Int      @id @unique @db.UnsignedSmallInt
  ticket_uuid String   @unique @default(uuid()) @db.Char(36)
  created_at  DateTime @default(now()) @db.DateTime(0)
  updated_at  DateTime @default(now()) @db.DateTime(0)
  present     Boolean  @default(false)
  ig_story    String   @db.VarChar(200)
  user        users    @relation(fields: [user_id], references: [user_id], onUpdate: Restrict, map: "seminar_attendance_ibfk_1")

  @@index([user_id], map: "user_id")
}

model teams {
  team_id            Int                 @id @default(autoincrement()) @db.UnsignedSmallInt
  competition_id     Int                 @db.UnsignedSmallInt
  team_name          String              @unique(map: "team_name") @db.VarChar(45)
  team_biodata       String?             @db.VarChar(45)
  team_lead_id       Int                 @unique @db.UnsignedSmallInt
  team_status        team_statuses       @default(WAITING)
  join_token         String              @unique @default(uuid()) @db.Char(36)
  institution        String              @db.VarChar(60)
  phase              phase?
  detail_teams       detail_teams[]
  team_payment_proof team_payment_proof?
  pengumuman         pengumuman?
  competitions       competitions        @relation(fields: [competition_id], references: [competition_id], onUpdate: Restrict, map: "teams_competition_id_foreign")
  team_leader        users               @relation("teams_team_leadTousers", fields: [team_lead_id], references: [user_id], onUpdate: Restrict, map: "teams_team_lead_foreign")

  @@index([competition_id], map: "teams_competition_id_foreign")
  @@index([team_lead_id], map: "teams_team_lead_foreign")
}

model team_payment_proof {
  team_id       Int     @id @unique @db.UnsignedSmallInt
  nama_rekening String? @db.VarChar(225)
  no_rekening   String? @db.VarChar(225)
  payment_proof String? @db.VarChar(225)
  teams         teams   @relation(fields: [team_id], references: [team_id], onUpdate: Restrict, map: "team_payment_proof_team_id_foreign")

  @@index([team_id], map: "team_payment_proof_team_id_foreign")
}

model pengumuman {
  team_id   Int     @id @unique @db.UnsignedSmallInt
  judul     String? @db.VarChar(45)
  deskripsi String? @db.VarChar(45)
  teams     teams   @relation(fields: [team_id], references: [team_id], onUpdate: Restrict, map: "pengumuman_team_id_foreign")

  @@index([team_id], map: "pengumuman_team_id_foreign")
}

model detail_teams {
  detail_team_id Int   @id @default(autoincrement()) @db.UnsignedSmallInt
  user_id        Int   @db.UnsignedSmallInt
  team_id        Int   @db.UnsignedSmallInt
  teams          teams @relation(fields: [team_id], references: [team_id], onUpdate: Restrict, map: "detail_teams_team_id_foreign")
  users          users @relation(fields: [user_id], references: [user_id], onUpdate: Restrict, map: "detail_teams_user_id_foreign")

  @@unique([user_id, team_id])
  @@index([team_id], map: "detail_teams_team_id_foreign")
  @@index([user_id], map: "detail_teams_user_id_foreign")
}

model competitions {
  competition_id          Int     @id @default(autoincrement()) @db.UnsignedSmallInt
  competition_name        String  @unique @db.VarChar(45)
  competition_description String  @db.Text
  teams                   teams[]
}

enum role_for_admins {
  SEKBEN
  INTI
  GOD
  EXHIBITOR
  INSTRUCTOR
}

enum team_statuses {
  WAITING
  ACCEPTED
  REJECTED
}

enum phase {
  PENYISIHAN
  SEMIFINAL
  FINAL
  DISKUALIFIKASI
}
